var documenterSearchIndex = {"docs":
[{"location":"benchmarks/#Benchmarks","page":"Benchmarks","title":"Benchmarks","text":"","category":"section"},{"location":"pooling/#Pooling-coefficients-(pool)","page":"Pooling coefficients (pool)","title":"Pooling coefficients (pool)","text":"","category":"section"},{"location":"pooling/","page":"Pooling coefficients (pool)","title":"Pooling coefficients (pool)","text":"Mipo\npool","category":"page"},{"location":"pooling/#Mice.Mipo","page":"Pooling coefficients (pool)","title":"Mice.Mipo","text":"Mipo\n\nA type for storing the pooled results of multiply imputed repeated analyses (Mira).\n\n\n\n\n\n","category":"type"},{"location":"pooling/#Mice.pool","page":"Pooling coefficients (pool)","title":"Mice.pool","text":"pool(mira::Mira)\n\nPools the results of multiply imputed repeated analyses (Mira). The function will work on any Mira object containing model outputs which are receptive to the coef, stderror and nobs functions from StatsAPI.jl.\n\n\n\n\n\n","category":"function"},{"location":"analysis/#Analysis-(with)","page":"Analysis (with)","title":"Analysis (with)","text":"","category":"section"},{"location":"analysis/","page":"Analysis (with)","title":"Analysis (with)","text":"complete","category":"page"},{"location":"analysis/#Mice.complete","page":"Analysis (with)","title":"Mice.complete","text":"complete(\n    mids::Mids,\n    imputation::Int\n    )\n\nProduces a DataFrame with missings replaced with imputed values from a multiply imputed dataset (Mids) object.\n\nThe Mids object must be supplied first.\n\nThe imputation argument is an integer identifying which specific imputation is to be used to fill in the missing values.\n\n\n\n\n\ncomplete(\n    mids::Mids,\n    action::String\n    )\n\nSummarises the outputs of all imputations in a multiply imputed dataset (Mids).\n\nThe Mids object must be supplied first.\n\nThe action argument is a string identifying what format the output should take. If specified as \"long\", the function will return a single DataFrame, containing the results of each imputation in succession with an identifier (imp). If specified as \"list\", the function will return a vector of individual DataFrames.\n\n\n\n\n\n","category":"function"},{"location":"analysis/","page":"Analysis (with)","title":"Analysis (with)","text":"Mira\nwith","category":"page"},{"location":"analysis/#Mice.Mira","page":"Analysis (with)","title":"Mice.Mira","text":"Mira\n\nA multiply imputed repeated analyses object.\n\nThe analyses are stored as a vector of analyses of individual imputations.\n\n\n\n\n\n","category":"type"},{"location":"analysis/#Mice.with","page":"Analysis (with)","title":"Mice.with","text":"with(\n    mids::Mids,\n    func::Function\n    )\n\nConducts repeated analyses of a multiply imputed dataset (Mids).\n\nThe function takes two arguments: firstly the Mids object itself, then a function (func). The function should take the form data -> analysisFunction(arguments, data, moreArguments...), where data represents the position of the data argument in the function.\n\nFor example: with(mids, data -> lm(@formula(y ~ x1 + x2), data))\n\n\n\n\n\n","category":"function"},{"location":"imputation/#Imputation-(mice)","page":"Imputation (mice)","title":"Imputation (mice)","text":"","category":"section"},{"location":"imputation/","page":"Imputation (mice)","title":"Imputation (mice)","text":"The main function of the package is mice, which takes a DataFrame as its input. It returns a multiply imputed dataset (Mids) object with the imputed values.","category":"page"},{"location":"imputation/","page":"Imputation (mice)","title":"Imputation (mice)","text":"Mids\nmice","category":"page"},{"location":"imputation/#Mice.Mids","page":"Imputation (mice)","title":"Mice.Mids","text":"Mids\n\nA multiply imputed dataset object.\n\nThe data originally supplied are stored as data.\n\nThe imputed data are stored as imputations (one column per imputation).\n\nThe number of imputations is stored as m.\n\nThe imputation method for each variable is stored as methods.\n\nThe predictor matrix is stored as predictorMatrix.\n\nThe order in which the variables are imputed is stored as visitSequence.\n\nThe number of iterations is stored as iter.\n\nThe mean of each variable across the imputations is stored as meanTraces.\n\nThe variance of each variable across the imputations is stored as varTraces.\n\n\n\n\n\n","category":"type"},{"location":"imputation/#Mice.mice","page":"Imputation (mice)","title":"Mice.mice","text":"mice(\n    data::DataFrame;\n    m::Int = 5,\n    visitSequence::Union{Vector{String}, Nothing} = nothing,\n    methods::Union{NamedVector{String}, Nothing} = nothing,\n    predictorMatrix::Union{NamedMatrix{Bool}, Nothing} = nothing,\n    iter::Int = 10,\n    progressReports::Bool = true,\n    gcSchedule::Float64 = 1.0,\n    threads::Bool = true,\n    kwargs...\n    )\n\nImputes missing values in a dataset using the MICE algorithm.  Heavily based on the R package mice (van Buuren & Groothuis-Oudshoorn, 2011).\n\nThe data containing missing values (data) must be supplied as a DataFrame.\n\nThe number of imputations created is specified by m.\n\nThe variables will be imputed in the order specified by visitSequence.  The default is sorted by proportion of missing data in ascending order;  the order can be customised using a vector of variable names in the desired order.\n\nThe imputation method for each variable is specified by the NamedArray methods.  The default is to use predictive mean matching (pmm) for all variables.  Currently only pmm is supported.  Any variable not to be imputed can be marked as such using an empty string (\"\").\n\nThe predictor matrix is specified by the NamedArray predictorMatrix.  The default is to use all other variables as predictors for each variable.  Any variable not predicting another variable can be marked as such in the matrix using a 0.\n\nThe number of iterations is specified by iter.\n\nIf progressReports is true, a progress indicator will be displayed in the console.\n\ngcSchedule dictates when the garbage collector will be (additionally) invoked. The  number provided is the fraction of your RAM remaining at which the GC will be called. For small datasets, you may get away with a value of 0.0 (never called), but for larger datasets, it may be worthwhile to call it more frequently. The default is to call it  after each iteration of each variable (1.0), but this may negatively affect performance if it is not necessary for your dataset.\n\nthreads dictates whether multi-threading will be used. This will improve performance for larger jobs if and only if Julia has been launched with multiple threads (which you can verify by calling Threads.nthreads()). The default is true.\n\n\n\n\n\nmice(\n    mids::Mids;\n    iter::Int = 10,\n    progressReports::Bool = true,\n    gcSchedule::Float64 = 1.0,\n    threads::Bool = true,\n    kwargs...\n    )\n\nAdds additional iterations to an existing Mids object.\n\nThe number of additional iterations is specified by iter.\n\nIf progressReports is true, a progress indicator will be displayed in the console.\n\ngcSchedule dictates when the garbage collector will be (additionally) invoked. The  number provided is the fraction of your RAM remaining at which the GC will be called. For small datasets, you may get away with a value of 0.0 (never called), but for larger datasets, it may be worthwhile to call it more frequently. The default is to call it  after each iteration of each variable (1.0), but this may negatively affect performance if it is not necessary for your dataset.\n\nthreads dictates whether multi-threading will be used. This will improve performance for larger jobs if and only if Julia has been launched with multiple threads (which you can verify by calling Threads.nthreads()). The default is true.\n\n\n\n\n\n","category":"function"},{"location":"imputation/","page":"Imputation (mice)","title":"Imputation (mice)","text":"makeMonotoneSequence","category":"page"},{"location":"imputation/#Mice.makeMonotoneSequence","page":"Imputation (mice)","title":"Mice.makeMonotoneSequence","text":"makeMonotoneSequence(data::DataFrame)\n\nReturns a vector of the column names in a DataFrame in ascending order of missingness. This facilitates convergence in cases where missingness follows a \"monotone\" pattern. It is the default visit sequence for the mice() function.\n\n\n\n\n\n","category":"function"},{"location":"imputation/","page":"Imputation (mice)","title":"Imputation (mice)","text":"makePredictorMatrix","category":"page"},{"location":"imputation/#Mice.makePredictorMatrix","page":"Imputation (mice)","title":"Mice.makePredictorMatrix","text":"makePredictorMatrix(data::DataFrame)\n\nReturns a named matrix of booleans defining the predictors for each variable in data. The variables to be predicted are on the rows, and the predictors are on the columns. The default is to use all variables as predictors for all other variables (i.e. all 1s except for the diagonal, which is 0).\n\n\n\n\n\n","category":"function"},{"location":"imputation/","page":"Imputation (mice)","title":"Imputation (mice)","text":"makeMethods","category":"page"},{"location":"imputation/#Mice.makeMethods","page":"Imputation (mice)","title":"Mice.makeMethods","text":"makeMethods(data::DataFrame)\n\nReturns a named vector of strings defining the method by which each variable in data should be imputed in the mice() function. The default (and only supported) method is predictive mean matching (pmm).\n\n\n\n\n\n","category":"function"},{"location":"imputation/#Diagnostics","page":"Imputation (mice)","title":"Diagnostics","text":"","category":"section"},{"location":"imputation/","page":"Imputation (mice)","title":"Imputation (mice)","text":"After performing multiple imputation, you should inspect the trace plots of the imputed variables to verify convergence. Mice.jl includes the a plotting function to do this.","category":"page"},{"location":"imputation/","page":"Imputation (mice)","title":"Imputation (mice)","text":"plot","category":"page"},{"location":"imputation/#RecipesBase.plot","page":"Imputation (mice)","title":"RecipesBase.plot","text":"plot(\n    mids::Mids,\n    var::String\n    )\n\nPlots the mean and standard deviation of the imputed values for a given variable. Here var is given as a string (the name of the variable).\n\n\n\n\n\nplot(\n    mids::Mids,\n    var_no::Int\n    )\n\nPlots the mean and standard deviation of the imputed values for a given variable. Here var_no is given as an integer (the index of the variable in the visitSequence).\n\n\n\n\n\n","category":"function"},{"location":"#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"#Installation","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"To install Mice.jl through the Julia REPL, you can type ] add Mice or:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"using Pkg\nPkg.add(\"Mice\")","category":"page"},{"location":"#Usage","page":"Getting started","title":"Usage","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"To load the package, use the command:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"using Mice","category":"page"}]
}
